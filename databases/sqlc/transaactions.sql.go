// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transaactions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    account_id,
    related_account_id,
    amount,
    transaction_type,
    description,
    reference_number
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING transaction_id, account_id, related_account_id, amount, transaction_type, description, reference_number, status, transaction_date, created_at
`

type CreateTransactionParams struct {
	AccountID        uuid.UUID
	RelatedAccountID pgtype.UUID
	Amount           pgtype.Numeric
	TransactionType  pgtype.Text
	Description      pgtype.Text
	ReferenceNumber  string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.AccountID,
		arg.RelatedAccountID,
		arg.Amount,
		arg.TransactionType,
		arg.Description,
		arg.ReferenceNumber,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.AccountID,
		&i.RelatedAccountID,
		&i.Amount,
		&i.TransactionType,
		&i.Description,
		&i.ReferenceNumber,
		&i.Status,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountTransactions = `-- name: GetAccountTransactions :many
SELECT transaction_id, account_id, related_account_id, amount, transaction_type, description, reference_number, status, transaction_date, created_at FROM transactions
WHERE account_id = $1
ORDER BY transaction_date DESC
LIMIT $2 OFFSET $3
`

type GetAccountTransactionsParams struct {
	AccountID uuid.UUID
	Limit     int32
	Offset    int32
}

func (q *Queries) GetAccountTransactions(ctx context.Context, arg GetAccountTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getAccountTransactions, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.AccountID,
			&i.RelatedAccountID,
			&i.Amount,
			&i.TransactionType,
			&i.Description,
			&i.ReferenceNumber,
			&i.Status,
			&i.TransactionDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT transaction_id, account_id, related_account_id, amount, transaction_type, description, reference_number, status, transaction_date, created_at FROM transactions
WHERE transaction_id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, transactionID uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.AccountID,
		&i.RelatedAccountID,
		&i.Amount,
		&i.TransactionType,
		&i.Description,
		&i.ReferenceNumber,
		&i.Status,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}

const transferFunds = `-- name: TransferFunds :exec
WITH debit AS (
    UPDATE accounts
    SET balance = balance - $1,
        updated_at = CURRENT_TIMESTAMP
    WHERE account_id = $2
    RETURNING account_id, balance
),
credit AS (
    UPDATE accounts
    SET balance = balance + $1,
        updated_at = CURRENT_TIMESTAMP
    WHERE account_id = $3
    RETURNING account_id, balance
)
INSERT INTO transactions (
    account_id,
    related_account_id,
    amount,
    transaction_type,
    description,
    reference_number,
    status
) VALUES
    ($2, $3, -$1, 'TRANSFER', $4, $5, 'COMPLETED'),
    ($3, $2, $1, 'TRANSFER', $4, $5, 'COMPLETED')
`

type TransferFundsParams struct {
	Amount           pgtype.Numeric
	AccountID        uuid.UUID
	RelatedAccountID pgtype.UUID
	Description      pgtype.Text
	ReferenceNumber  string
}

func (q *Queries) TransferFunds(ctx context.Context, arg TransferFundsParams) error {
	_, err := q.db.Exec(ctx, transferFunds,
		arg.Amount,
		arg.AccountID,
		arg.RelatedAccountID,
		arg.Description,
		arg.ReferenceNumber,
	)
	return err
}
