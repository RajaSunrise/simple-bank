// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    nik, full_name, email, phone, address, date_of_birth
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING customer_id, nik, full_name, email, phone, address, date_of_birth, created_at, updated_at
`

type CreateCustomerParams struct {
	Nik         string
	FullName    string
	Email       string
	Phone       string
	Address     string
	DateOfBirth pgtype.Date
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Nik,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.DateOfBirth,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Nik,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerAccounts = `-- name: GetCustomerAccounts :many
SELECT account_id, customer_id, branch_code, account_number, account_type, balance, currency, status, opened_date, created_at, updated_at FROM accounts
WHERE customer_id = $1
ORDER BY opened_date DESC
`

func (q *Queries) GetCustomerAccounts(ctx context.Context, customerID uuid.UUID) ([]Account, error) {
	rows, err := q.db.Query(ctx, getCustomerAccounts, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.CustomerID,
			&i.BranchCode,
			&i.AccountNumber,
			&i.AccountType,
			&i.Balance,
			&i.Currency,
			&i.Status,
			&i.OpenedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT customer_id, nik, full_name, email, phone, address, date_of_birth, created_at, updated_at FROM customers
WHERE email = $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Nik,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT customer_id, nik, full_name, email, phone, address, date_of_birth, created_at, updated_at FROM customers
WHERE customer_id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, customerID uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Nik,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
