// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    customer_id, branch_code, account_number, account_type, opened_date
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING account_id, customer_id, branch_code, account_number, account_type, balance, currency, status, opened_date, created_at, updated_at
`

type CreateAccountParams struct {
	CustomerID    uuid.UUID
	BranchCode    string
	AccountNumber string
	AccountType   pgtype.Text
	OpenedDate    pgtype.Date
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.CustomerID,
		arg.BranchCode,
		arg.AccountNumber,
		arg.AccountType,
		arg.OpenedDate,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.CustomerID,
		&i.BranchCode,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.OpenedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByNumber = `-- name: GetAccountByNumber :one
SELECT account_id, customer_id, branch_code, account_number, account_type, balance, currency, status, opened_date, created_at, updated_at FROM accounts
WHERE account_number = $1
`

func (q *Queries) GetAccountByNumber(ctx context.Context, accountNumber string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByNumber, accountNumber)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.CustomerID,
		&i.BranchCode,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.OpenedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts
SET
    balance = balance + $1,
    updated_at = CURRENT_TIMESTAMP
WHERE account_id = $2
`

type UpdateAccountBalanceParams struct {
	Balance   pgtype.Numeric
	AccountID uuid.UUID
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.Exec(ctx, updateAccountBalance, arg.Balance, arg.AccountID)
	return err
}
