// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, customer_id, username, password_hash, role, last_login, created_at, updated_at FROM auth_users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i AuthUser
	err := row.Scan(
		&i.UserID,
		&i.CustomerID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO auth_users (
    customer_id, username, password_hash, role
) VALUES (
    $1, $2, $3, $4
) RETURNING user_id, customer_id, username, password_hash, role, last_login, created_at, updated_at
`

type RegisterUserParams struct {
	CustomerID   pgtype.UUID
	Username     string
	PasswordHash string
	Role         pgtype.Text
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (AuthUser, error) {
	row := q.db.QueryRow(ctx, registerUser,
		arg.CustomerID,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
	)
	var i AuthUser
	err := row.Scan(
		&i.UserID,
		&i.CustomerID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
